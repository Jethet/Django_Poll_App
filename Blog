February 25:
After the first meeting with my coach Lori King, I started out learning Django with the Djangogirls tutorial. For this, I installed PaizaCloud and created a virtual environment. The tutorial is interesting, though obviously the audience is meant to be of a younger age. Anyway, my goal was to work through the tutorial this week and also look at an HTML tutorial that codebar.io has on its website.

February 27:
The initial plan proved to be a bit too optimistic. The tutorial turned out to be somewhat outdated: a newer version of Django caused problems. I decided to switch to a tutorial called Django-Marcador. This tutorial is aimed at creating an app to manage bookmarks. It is interesting and I achieved some things (getting the basic app running on the development server, being able to use it and make changes online etc.). However, further down into the code (building the frontend, configuring URLs, views and templates) it turned out that also this tutorial used an older version of Django and there were too many conflicts in the code.

LESSONS LEARNED: Don't start any tutorials without being absolutely clear a) what the current version of the software used in the tutorial is, and b) whether it is using the right/latest version of Python 3.

February 28:
The obvious choice: tutorials from Django. The tutorial guides you through the creation of a basic poll application:
- a public site that lets people view polls and vote in them.
- an admin site that lets the administrator add, change and delete polls.

There is also an advanced tutorial (perhaps later?).
So what can I say about this tutorial (docs.djangoproject.com)? It works so far.

BUT: In almost all documentation and tutorials I have come across, the importance of a virtual environment was highlighted.
That is very good because a venv is indeed important. But why is the information always incomplete? You get info on how to create and activate a virtual environment, but nobody explains that if you work with a venv you have to INSTALL DJANGO IN THE VENV even if you have installed Django before. You should also CONTINUE in the venv with django-admin startproject mysite.
Otherwise, you will not be able to run $python manage.py runserver and get to see the "Congratulations" page on hhttp://127.0.0.1:8000/ .... that would be a pity, no?

So there we are, lost at least four hours to find this out. They say you learn by doing. Yeah. Especially by doing the same thing over and over the wrong way because of incomplete information.

March 1:
Still following the tutorial and no major problems so far. It has a clear logic and I more or less understand what is done, although I will not be able to reproduce it by myself. I have created models, learned to update the settings to include the app under INSTALLED APPS so that the app is integrated into the overall project. I understand the app is 'plugable' and can be used in other projects by just adding it as installed app. I have also learned about the commands makemigration and migrate as way of saving and applying changes to models. In the project SQL is used and it is recommended to use SQLite so I have seen how SQL creates table names, primary keys, IDs, Foreign Key and all sorts of field types. The command sqlmigrate prints to screen everything SQL provides for your database and you can check it. With the command python manage.py check, you can check if there are issues in your project.

So that is a lot of information. The API was introduced and some commands in the shell were demonstrated and explained. There is a lot more to it but I now have an impression of the ways you can search the database using primary keys or id's etc. etc. Very interesting but also too much to take in so it was good the tutorial only dived into a few examples. After this, working with URLs was explained and after creating views (specific web pages) it was possible to access these online. All of this worked fine. The error messages I received I could quickly find in my code and correct. The server will not run if the views contain errors, and the command line returns error messages that immediately show what is wrong. The views were terribly basic (just a line of text in a horrible font) but it is great that things work as they should.

March 2:
So what can I say? Yesterday must have been my lucky day. Today, the command to get the venv activated did not work. I spent another three hours on Stackoverflow and other websites to find out the problem. Although officially Python 3.7 uses the command: source venv/bin/activate to activate the venv, and although I have used that the entire day yesterday, today someone must have decided it would be fun to disable this command. I got nothing but error messages. Finally, just trying something with my eyes closed, I got the venv running using . bin/activate without knowing why. Without the venv active, you cannot run the server and not continue with the tutorial. Fine, it worked for now. I learned some more about views, templates and about how to avoid hardcoded URLs by using a template for paths.

I am trying to get the bigger picture but it is so much information that it is not easy to get my head around it. Maybe I will make some sort of overview of the steps without all the detail, for an at-a-glance idea of what I am doing. The project is still interesting and I very much want to continue and also do more of these tutorials. Somehow I feel a bit stressed because I lose so much time with these stupid things like not getting the venv activated. We'll see how that works (or not) tomorrow.





